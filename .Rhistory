zlab = "y1 (snitt)")
s3d$plane3d(mreg6, col = "maroon")
plot_ly(data,
x = ~x2,  # pFysisk
y = ~x3,  # pDigital
z = ~x4,  # timer
color = ~y1,
colors = colorRamp(c("blue", "green", "red")),
type = "scatter3d",
mode = "markers") %>%
layout(title = "3D Visualisering av mmreg4",
scene = list(xaxis = list(title = "pFysisk"),
yaxis = list(title = "pDigital"),
zaxis = list(title = "Timer")))
slice_data <- subset(data, x4 >= 20 & x4 <= 30)
library(rgl)
# Plot alle punkter i 3D, fargekoder y1
plot3d(x = x2, y = x3, z = x4, col = heat.colors(length(y1))[rank(y1)],
size = 5, type = "s", xlab = "pFysisk", ylab = "pDigital", zlab = "Timer")
install.packages("misc3d")
library(matlib)
library(scatterplot3d)
library(effects)
library(plotly)
library(misc3d)
# Innsamlet data
data = read.csv("Bok1.csv", sep = ";")
x1 = data$pOppmote
x2 = data$pFysisk
x3 = data$pDigital
x4 = data$timer
y1 = data$snitt
y2 = data$timer
# Beregn alle mulige regresjonslinjer
reg1 = lm(y1 ~ x1)
reg2 = lm(y1 ~ x2)
reg3 = lm(y1 ~ x3)
reg4 = lm(y1 ~ x4)
reg5 = lm(y2 ~ x1)
reg6 = lm(y2 ~ x2)
reg7 = lm(y2 ~ x3)
mreg1 = lm(y1 ~ x1 + x2)
mreg2 = lm(y1 ~ x1 + x3)
mreg3 = lm(y1 ~ x1 + x4)
mreg4 = lm(y1 ~ x2 + x3)
mreg5 = lm(y1 ~ x2 + x4)
mreg6 = lm(y1 ~ x3 + x4)
mreg7 = lm(y2 ~ x1 + x2)
mreg8 = lm(y2 ~ x1 + x3)
mreg9 = lm(y2 ~ x2 + x3)
mmreg1 = lm(y1 ~ x1 + x2 + x3)
mmreg2 = lm(y1 ~ x1 + x2 + x4)
mmreg3 = lm(y1 ~ x1 + x3 + x4)
mmreg4 = lm(y1 ~ x2 + x3 + x4)
mmreg5 = lm(y2 ~ x1 + x2 + x3)
m3reg1 = lm(y1 ~ x1 + x2 + x3 + x4)
regresjonsnavn = c("reg1","reg2","reg3","reg4","reg5","reg6","reg7","mreg1","mreg2","mreg3","mreg4","mreg5","mreg6","mreg7","mreg8","mreg9",
"mmreg1","mmreg2","mmreg3","mmreg4","mmreg5","m3reg1")
regresjon = list(reg1,reg2,reg3,reg4,reg5,reg6,reg7,mreg1,mreg2,mreg3,mreg4,mreg5,mreg6,mreg7,mreg8,mreg9,
mmreg1,mmreg2,mmreg3,mmreg4,mmreg5,m3reg1)
# Lag liste med alle modellnavn, total kvadratisk feil, standardfeil, forklaringsgrad, adjust forklaringsgrad
all = list()
for (i in 1:length(regresjon)) {
frame = data.frame(
name = regresjonsnavn[i],               # Navn til modellen
SSe = deviance(regresjon[[i]]),         # Total kvadratisk feil til modellen
se = sqrt(                              # standardfeil til modellen (fra før jeg lærte "summary" :| )
deviance(regresjon[[i]])/
(length(y1) - length(coef(regresjon[[i]])))
),
R2 = summary(regresjon[[i]])$r.squared, # R^2 til modellen
adjR2 = summary(regresjon[[i]])$adj.r.squared     # adjusted R^2 til modellen, justerer for multipple regresjon
)
all = append(all, list(frame))
}
# Finn modellene som kommer best ut
min_SSe   = all[[ which.min(sapply(all, function(x) x$SSe))   ]]
min_se    = all[[ which.min(sapply(all, function(x) x$se))    ]]
max_R2    = all[[ which.max(sapply(all, function(x) x$R2))    ]]
max_adjR2 = all[[ which.max(sapply(all, function(x) x$adjR2)) ]]
min_SSe
min_se
max_R2
max_R2
s3d <- scatterplot3d(x3, x4, y1,
pch = 19,
highlight.3d = TRUE,
angle = 50,
type = "h",
main = "3D-plot med regresjonsplan",
xlab = "x1 (pOppmote)",
ylab = "x2 (pFysisk)",
zlab = "y1 (snitt)")
s3d$plane3d(mreg6, col = "maroon")
plot_ly(data,
x = ~x2,  # pFysisk
y = ~x3,  # pDigital
z = ~x4,  # timer
color = ~y1,
colors = colorRamp(c("blue", "green", "red")),
type = "scatter3d",
mode = "markers") %>%
layout(title = "3D Visualisering av mmreg4",
scene = list(xaxis = list(title = "pFysisk"),
yaxis = list(title = "pDigital"),
zaxis = list(title = "Timer")))
slice_data <- subset(data, x4 >= 20 & x4 <= 30)
contour3d(vol_array, level = 0.5,
x = seq(0, 1, length.out = dim(vol_array)[1]),
y = seq(0, 1, length.out = dim(vol_array)[2]),
z = seq(0, 1, length.out = dim(vol_array)[3]),
color = "blue")
library(matlib)
library(scatterplot3d)
library(effects)
library(plotly)
library(misc3d)
# Innsamlet data
data = read.csv("Bok1.csv", sep = ";")
x1 = data$pOppmote
x2 = data$pFysisk
x3 = data$pDigital
x4 = data$timer
y1 = data$snitt
y2 = data$timer
# Beregn alle mulige regresjonslinjer
reg1 = lm(y1 ~ x1)
reg2 = lm(y1 ~ x2)
reg3 = lm(y1 ~ x3)
reg4 = lm(y1 ~ x4)
reg5 = lm(y2 ~ x1)
reg6 = lm(y2 ~ x2)
reg7 = lm(y2 ~ x3)
mreg1 = lm(y1 ~ x1 + x2)
mreg2 = lm(y1 ~ x1 + x3)
mreg3 = lm(y1 ~ x1 + x4)
mreg4 = lm(y1 ~ x2 + x3)
mreg5 = lm(y1 ~ x2 + x4)
mreg6 = lm(y1 ~ x3 + x4)
mreg7 = lm(y2 ~ x1 + x2)
mreg8 = lm(y2 ~ x1 + x3)
mreg9 = lm(y2 ~ x2 + x3)
mmreg1 = lm(y1 ~ x1 + x2 + x3)
mmreg2 = lm(y1 ~ x1 + x2 + x4)
mmreg3 = lm(y1 ~ x1 + x3 + x4)
mmreg4 = lm(y1 ~ x2 + x3 + x4)
mmreg5 = lm(y2 ~ x1 + x2 + x3)
m3reg1 = lm(y1 ~ x1 + x2 + x3 + x4)
regresjonsnavn = c("reg1","reg2","reg3","reg4","reg5","reg6","reg7","mreg1","mreg2","mreg3","mreg4","mreg5","mreg6","mreg7","mreg8","mreg9",
"mmreg1","mmreg2","mmreg3","mmreg4","mmreg5","m3reg1")
regresjon = list(reg1,reg2,reg3,reg4,reg5,reg6,reg7,mreg1,mreg2,mreg3,mreg4,mreg5,mreg6,mreg7,mreg8,mreg9,
mmreg1,mmreg2,mmreg3,mmreg4,mmreg5,m3reg1)
# Lag liste med alle modellnavn, total kvadratisk feil, standardfeil, forklaringsgrad, adjust forklaringsgrad
all = list()
for (i in 1:length(regresjon)) {
frame = data.frame(
name = regresjonsnavn[i],               # Navn til modellen
SSe = deviance(regresjon[[i]]),         # Total kvadratisk feil til modellen
se = sqrt(                              # standardfeil til modellen (fra før jeg lærte "summary" :| )
deviance(regresjon[[i]])/
(length(y1) - length(coef(regresjon[[i]])))
),
R2 = summary(regresjon[[i]])$r.squared, # R^2 til modellen
adjR2 = summary(regresjon[[i]])$adj.r.squared     # adjusted R^2 til modellen, justerer for multipple regresjon
)
all = append(all, list(frame))
}
# Finn modellene som kommer best ut
min_SSe   = all[[ which.min(sapply(all, function(x) x$SSe))   ]]
min_se    = all[[ which.min(sapply(all, function(x) x$se))    ]]
max_R2    = all[[ which.max(sapply(all, function(x) x$R2))    ]]
max_adjR2 = all[[ which.max(sapply(all, function(x) x$adjR2)) ]]
min_SSe
min_se
max_R2
max_R2
s3d <- scatterplot3d(x3, x4, y1,
pch = 19,
highlight.3d = TRUE,
angle = 50,
type = "h",
main = "3D-plot med regresjonsplan",
xlab = "x1 (pOppmote)",
ylab = "x2 (pFysisk)",
zlab = "y1 (snitt)")
s3d$plane3d(mreg6, col = "maroon")
plot_ly(data,
x = ~x2,  # pFysisk
y = ~x3,  # pDigital
z = ~x4,  # timer
color = ~y1,
colors = colorRamp(c("blue", "green", "red")),
type = "scatter3d",
mode = "markers") %>%
layout(title = "3D Visualisering av mmreg4",
scene = list(xaxis = list(title = "pFysisk"),
yaxis = list(title = "pDigital"),
zaxis = list(title = "Timer")))
library(matlib)
library(scatterplot3d)
library(effects)
library(plotly)
# Innsamlet data
data = read.csv("Bok1.csv", sep = ";")
x1 = data$pOppmote
x2 = data$pFysisk
x3 = data$pDigital
x4 = data$timer
y1 = data$snitt
y2 = data$timer
# Beregn alle mulige regresjonslinjer
reg1 = lm(y1 ~ x1)
reg2 = lm(y1 ~ x2)
reg3 = lm(y1 ~ x3)
reg4 = lm(y1 ~ x4)
reg5 = lm(y2 ~ x1)
reg6 = lm(y2 ~ x2)
reg7 = lm(y2 ~ x3)
mreg1 = lm(y1 ~ x1 + x2)
mreg2 = lm(y1 ~ x1 + x3)
mreg3 = lm(y1 ~ x1 + x4)
mreg4 = lm(y1 ~ x2 + x3)
mreg5 = lm(y1 ~ x2 + x4)
mreg6 = lm(y1 ~ x3 + x4)
mreg7 = lm(y2 ~ x1 + x2)
mreg8 = lm(y2 ~ x1 + x3)
mreg9 = lm(y2 ~ x2 + x3)
mmreg1 = lm(y1 ~ x1 + x2 + x3)
mmreg2 = lm(y1 ~ x1 + x2 + x4)
mmreg3 = lm(y1 ~ x1 + x3 + x4)
mmreg4 = lm(y1 ~ x2 + x3 + x4)
mmreg5 = lm(y2 ~ x1 + x2 + x3)
m3reg1 = lm(y1 ~ x1 + x2 + x3 + x4)
regresjonsnavn = c("reg1","reg2","reg3","reg4","reg5","reg6","reg7","mreg1","mreg2","mreg3","mreg4","mreg5","mreg6","mreg7","mreg8","mreg9",
"mmreg1","mmreg2","mmreg3","mmreg4","mmreg5","m3reg1")
regresjon = list(reg1,reg2,reg3,reg4,reg5,reg6,reg7,mreg1,mreg2,mreg3,mreg4,mreg5,mreg6,mreg7,mreg8,mreg9,
mmreg1,mmreg2,mmreg3,mmreg4,mmreg5,m3reg1)
# Lag liste med alle modellnavn, total kvadratisk feil, standardfeil, forklaringsgrad, adjust forklaringsgrad
all = list()
for (i in 1:length(regresjon)) {
frame = data.frame(
name = regresjonsnavn[i],               # Navn til modellen
SSe = deviance(regresjon[[i]]),         # Total kvadratisk feil til modellen
se = sqrt(                              # standardfeil til modellen (fra før jeg lærte "summary" :| )
deviance(regresjon[[i]])/
(length(y1) - length(coef(regresjon[[i]])))
),
R2 = summary(regresjon[[i]])$r.squared, # R^2 til modellen
adjR2 = summary(regresjon[[i]])$adj.r.squared     # adjusted R^2 til modellen, justerer for multipple regresjon
)
all = append(all, list(frame))
}
# Finn modellene som kommer best ut
min_SSe   = all[[ which.min(sapply(all, function(x) x$SSe))   ]]
min_se    = all[[ which.min(sapply(all, function(x) x$se))    ]]
max_R2    = all[[ which.max(sapply(all, function(x) x$R2))    ]]
max_adjR2 = all[[ which.max(sapply(all, function(x) x$adjR2)) ]]
min_SSe
min_se
max_R2
max_R2
s3d <- scatterplot3d(x3, x4, y1,
pch = 19,
highlight.3d = TRUE,
angle = 50,
type = "h",
main = "3D-plot med regresjonsplan",
xlab = "x1 (pOppmote)",
ylab = "x2 (pFysisk)",
zlab = "y1 (snitt)")
s3d$plane3d(mreg6, col = "maroon")
plot_ly(data,
x = ~x2,  # pFysisk
y = ~x3,  # pDigital
z = ~x4,  # timer
color = ~y1,
colors = colorRamp(c("blue", "green", "red")),
type = "scatter3d",
mode = "markers") %>%
layout(title = "3D Visualisering av mmreg4",
scene = list(xaxis = list(title = "pFysisk"),
yaxis = list(title = "pDigital"),
zaxis = list(title = "Timer")))
plot(allEffects(mmreg4))
#H1: Økt total forelesningsdeltakelse (fysisk + digitalt) gir bedre karakter.
library(metRology)
data = read.csv("Bok1.csv", sep = ";")
x = data$pOppmote
y = data$snitt
reg = lm(y~x)
SSe = deviance(reg)
SS0 = 0
v0 = -2
n = length(x)
v1 = v0 + n
SS1 = SS0 + SSe
SSx = sum((x - mean(x))^2)
s1 = sqrt(SS1/v1)
beta = coef(reg)["x"]
# H1: b>0, H0: b<=0
distr = pt.scaled(0, v1, beta, s1*sqrt(1/SSx))
distr
breg =  brm(
formula = snitt ~ pOppmote,
data = data,
family = gaussian(),
file = "brm_snitt_oppmote"
)
#H1: Økt total forelesningsdeltakelse (fysisk + digitalt) gir bedre karakter.
library(metRology)
library(brms)
data = read.csv("Bok1.csv", sep = ";")
x = data$pOppmote
y = data$snitt
reg = lm(y~x)
SSe = deviance(reg)
SS0 = 0
v0 = -2
n = length(x)
v1 = v0 + n
SS1 = SS0 + SSe
SSx = sum((x - mean(x))^2)
s1 = sqrt(SS1/v1)
beta = coef(reg)["x"]
# H1: b>0, H0: b<=0
distr = pt.scaled(0, v1, beta, s1*sqrt(1/SSx))
distr
breg =  brm(
formula = snitt ~ pOppmote,
data = data,
family = gaussian(),
file = "brm_snitt_oppmote"
)
plot(conditional_effects(breg))
#H2: Økt total forelesningsdeltakelse (fysisk + digitalt) gir færre timer.
library(metRology)
data = read.csv("Bok1.csv", sep = ";")
x = data$pOppmote
y = data$timer
reg = lm(y~x)
SSe = deviance(reg)
SS0 = 0
v0 = -2
n = length(x)
v1 = v0 + n
SS1 = SS0 + SSe
SSx = sum((x - mean(x))^2)
s1 = sqrt(SS1/v1)
beta = coef(reg)["x"]
# H1: b<0, H0: b<=0
distr = pt.scaled(0, v1, beta, s1*sqrt(1/SSx))
distr
breg =  brm(
formula = timer ~ pOppmote,
data = data,
family = gaussian(),
file = "brm_timer_oppmote"
)
plot(conditional_effects(breg))
#H3: Antall timer jobbet uken før eksamen forklarer karakterer bedre enn oppmøte (skippertak).
library(metRology)
library(tidybayes)
library(ggplot2)
library(plotly)
library(dplyr)
data = read.csv("Bok1.csv", sep = ";")
x1 = data$pOppmote
x2 = data$snitt
y = data$timer
reg = lm(y~ x1 + x2)
SSe = deviance(reg)
SS0 = 0
v0 = -3 # n0-k-1
n = length(y)
v1 = v0 + n
SS1 = SS0 + SSe
SSx_1 = sum((x1 - mean(x1))^2)
SSx_2 = sum((x2 - mean(x2))^2)
s1 = sqrt(SS1/v1)
beta_1 = coef(reg)["x1"]
beta_2 = coef(reg)["x2"]
# H1: b_timer>b_oppmote theta=b_timer-b_oppmote theta>0, H0: theta<=0
satterthwaite = function(sigx, sigy, vx, vy){
a = (sigx^2)/(vx+1)
b = (sigy^2)/(vy+1)
return (floor( (a+b)^2 / ((a^2)/vx + (b^2)/vy) ))
}
my = beta_1 - beta_2
sigma = sqrt( (s1*sqrt(1/SSx_1))^2 + (s1*sqrt(1/SSx_2))^2 )
nu = satterthwaite(
sigx = s1*sqrt(1/SSx_1),
sigy = s1*sqrt(1/SSx_2),
vx = v1,
vy = v1
)
distr = pt.scaled(0, nu, my, sigma)
distr
breg =  brm(
formula = snitt ~ pOppmote + timer,
data = data,
family = gaussian(),
file = "brm_snitt_oppmote_timer"
)
# Lag et grid av verdier for timer og oppmøte
newdata <- expand.grid(
pOppmote = seq(min(data$pOppmote), max(data$pOppmote), length.out = 30),
timer = seq(min(data$timer), max(data$timer), length.out = 30)
)
# Legg til prediksjoner med usikkerhet
preds <- add_fitted_draws(breg, newdata = newdata, re_formula = NA)
# Beregn gjennomsnitt og usikkerhet per punkt
summary_preds <- preds %>%
group_by(pOppmote, timer) %>%
summarise(
mean = mean(.value),
lower = quantile(.value, 0.025),
upper = quantile(.value, 0.975)
)
# Plot interaktivt 3D plan med usikkerhet som farge
plot_ly(summary_preds, x = ~pOppmote, y = ~timer, z = ~mean,
type = "mesh3d", intensity = ~upper - lower, colors = c("blue", "red")) %>%
layout(scene = list(
xaxis = list(title = "Oppmote"),
yaxis = list(title = "Timer"),
zaxis = list(title = "Karakter (snitt)")
))
library(matlib)
library(scatterplot3d)
library(effects)
library(plotly)
# Innsamlet data
data = read.csv("Bok1.csv", sep = ";")
x1 = data$pOppmote
x2 = data$pFysisk
x3 = data$pDigital
x4 = data$timer
y1 = data$snitt
y2 = data$timer
# Beregn alle mulige regresjonslinjer
reg1 = lm(y1 ~ x1)
reg2 = lm(y1 ~ x2)
reg3 = lm(y1 ~ x3)
reg4 = lm(y1 ~ x4)
reg5 = lm(y2 ~ x1)
reg6 = lm(y2 ~ x2)
reg7 = lm(y2 ~ x3)
mreg1 = lm(y1 ~ x1 + x2)
mreg2 = lm(y1 ~ x1 + x3)
mreg3 = lm(y1 ~ x1 + x4)
mreg4 = lm(y1 ~ x2 + x3)
mreg5 = lm(y1 ~ x2 + x4)
mreg6 = lm(y1 ~ x3 + x4)
mreg7 = lm(y2 ~ x1 + x2)
mreg8 = lm(y2 ~ x1 + x3)
mreg9 = lm(y2 ~ x2 + x3)
mmreg1 = lm(y1 ~ x1 + x2 + x3)
mmreg2 = lm(y1 ~ x1 + x2 + x4)
mmreg3 = lm(y1 ~ x1 + x3 + x4)
mmreg4 = lm(y1 ~ x2 + x3 + x4)
mmreg5 = lm(y2 ~ x1 + x2 + x3)
m3reg1 = lm(y1 ~ x1 + x2 + x3 + x4)
regresjonsnavn = c("reg1","reg2","reg3","reg4","reg5","reg6","reg7","mreg1","mreg2","mreg3","mreg4","mreg5","mreg6","mreg7","mreg8","mreg9",
"mmreg1","mmreg2","mmreg3","mmreg4","mmreg5","m3reg1")
regresjon = list(reg1,reg2,reg3,reg4,reg5,reg6,reg7,mreg1,mreg2,mreg3,mreg4,mreg5,mreg6,mreg7,mreg8,mreg9,
mmreg1,mmreg2,mmreg3,mmreg4,mmreg5,m3reg1)
# Lag liste med alle modellnavn, total kvadratisk feil, standardfeil, forklaringsgrad, adjust forklaringsgrad
all = list()
for (i in 1:length(regresjon)) {
frame = data.frame(
name = regresjonsnavn[i],               # Navn til modellen
SSe = deviance(regresjon[[i]]),         # Total kvadratisk feil til modellen
se = sqrt(                              # standardfeil til modellen (fra før jeg lærte "summary" :| )
deviance(regresjon[[i]])/
(length(y1) - length(coef(regresjon[[i]])))
),
R2 = summary(regresjon[[i]])$r.squared, # R^2 til modellen
adjR2 = summary(regresjon[[i]])$adj.r.squared     # adjusted R^2 til modellen, justerer for multipple regresjon
)
all = append(all, list(frame))
}
# Finn modellene som kommer best ut
min_SSe   = all[[ which.min(sapply(all, function(x) x$SSe))   ]]
min_se    = all[[ which.min(sapply(all, function(x) x$se))    ]]
max_R2    = all[[ which.max(sapply(all, function(x) x$R2))    ]]
max_adjR2 = all[[ which.max(sapply(all, function(x) x$adjR2)) ]]
min_SSe
min_se
max_R2
max_R2
s3d <- scatterplot3d(x3, x4, y1,
pch = 19,
highlight.3d = TRUE,
angle = 50,
type = "h",
main = "3D-plot med regresjonsplan",
xlab = "x1 (pOppmote)",
ylab = "x2 (pFysisk)",
zlab = "y1 (snitt)")
s3d$plane3d(mreg6, col = "maroon")
plot_ly(data,
x = ~x2,  # pFysisk
y = ~x3,  # pDigital
z = ~x4,  # timer
color = ~y1,
colors = colorRamp(c("blue", "green", "red")),
type = "scatter3d",
mode = "markers") %>%
layout(title = "3D Visualisering av mmreg4",
scene = list(xaxis = list(title = "pFysisk"),
yaxis = list(title = "pDigital"),
zaxis = list(title = "Timer")))
plot(allEffects(mmreg4))
